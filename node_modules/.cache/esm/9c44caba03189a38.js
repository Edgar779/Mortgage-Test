let pkg,Services,getErrorResponse,APIError,Validations,Verificators;_031‍.x([["default",()=>_031‍.o]]);_031‍.w("express",[["default",["pkg"],function(v){pkg=v}]]);_031‍.w("./service.js",[["default",["Services"],function(v){Services=v}]]);_031‍.w("../mainModels.js",[["getErrorResponse",["getErrorResponse"],function(v){getErrorResponse=v}]]);_031‍.w("../../services/APIError.js",[["default",["APIError"],function(v){APIError=v}]]);_031‍.w("./validation",[["*",null,function(v){Validations=v}]]);_031‍.w("../verificator",[["*",null,function(v){Verificators=v}]]);
const { Router, Response } = pkg;






class AuthRoutes {
   router = Router();

  constructor() {
    this.routes();
  }

   routes = () => {

    this.router.post('/signin', Validations.signin, this.signin);

    this.router.post('/changePassword', Validations.changePassword,this.changePassword);

  }

   signin = async (req, res) => {
    try {
      const response = await Services.signin(req.body.name, req.body.phone, req.body.email, req.body.password, req.body.codeEmail, req.body.codePhone);
      res.send(response);
    } catch (e) {
      new APIError(e, 500, 'signin function in auth/service.js');
      res.status(500).send(getErrorResponse());
    }
  }

  changePassword = async (req, res) => {
    try {
      const response = await Services.changePassword(req.body.email, req.body.codePhone, req.body.codeEmail, req.body.newPassword);
      res.send(response);
    } catch (e) {
      new APIError(e, 500, 'changePassword function in auth/service.js');
      res.status(500).send(getErrorResponse());
    }
  }


}

_031‍.d(new AuthRoutes().router);