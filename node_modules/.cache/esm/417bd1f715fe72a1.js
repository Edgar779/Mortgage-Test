let pkg,Services,getErrorResponse,APIError,Validations,Verificators;_15f‍.x([["default",()=>_15f‍.o]]);_15f‍.w("express",[["default",["pkg"],function(v){pkg=v}]]);_15f‍.w("./service.js",[["default",["Services"],function(v){Services=v}]]);_15f‍.w("../mainModels.js",[["getErrorResponse",["getErrorResponse"],function(v){getErrorResponse=v}]]);_15f‍.w("../../services/APIError.js",[["default",["APIError"],function(v){APIError=v}]]);_15f‍.w("./validation",[["*",null,function(v){Validations=v}]]);_15f‍.w("../verificator",[["*",null,function(v){Verificators=v}]]);
const { Router, Response } = pkg;







class Verificator {
   router = Router();

  constructor() {
    this.routes();
  }

   routes = () => {

    this.router.post('/verification-code', Validations.verificationCode, Verificators.sendPhone, Verificators.sendMail, this.verification);

    this.router.post('/checkPhone', Validations.checkPhone,  this.checkPhone);
    this.router.post('/checkEmail',  Validations.checkEmail, this.checkEmail);
    this.router.post('/sendCode', Validations.sendCode, Verificators.sendPhone, this.sendCode);
    this.router.post('/sendEmail', Validations.sendEmail, Verificators.sendMail, this.sendEmail);

  }
  verification = async (req, res) => {
    try {
      const response = await Services.verification(req.body.email, req.body.phone, req.body.codeEmail, req.body.codePhone);
      res.send(response);
    } catch (e) {
      new APIError(e, 500, 'verification function in auth/service.js');
      res.status(500).send(getErrorResponse());
    }
  }
  checkPhone = async (req, res) => {
    try {
      const response = await Services.checkPhone(req.body.phone, req.body.code);
      res.send(response);
    } catch (e) {
      new APIError(e, 500, 'checkPhone function in auth/service.js');
      res.status(500).send(getErrorResponse());
    }
  }
  checkEmail = async (req, res) => {
    try {
      const response = await Services.checkEmail(req.body.email, req.body.code);
      res.send(response);
    } catch (e) {
      new APIError(e, 500, 'checkEmail function in auth/service.js');
      res.status(500).send(getErrorResponse());
    }
  }
  sendCode = async (req, res) => {
    try {
      const response = await Services.sendCode(req.body.phone, req.body.codePhone);
      res.send(response);
    } catch (e) {
      new APIError(e, 500, 'changePassword function in auth/service.js');
      res.status(500).send(getErrorResponse());
    }
  }
  sendEmail = async (req, res) => {
    try {
      const response = await Services.sendEmail(req.body.phone, req.body.email, req.body.code, req.body.codeEmail);
      res.send(response);
    } catch (e) {
      new APIError(e, 500, 'changePasswordCheckCode function in auth/service.js');
      res.status(500).send(getErrorResponse());
    }
  }

}

_15f‍.d(new Verificator().router);